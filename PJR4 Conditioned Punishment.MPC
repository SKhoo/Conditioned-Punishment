\-------------------------------------------------------------------------
\PJR4 Conditioned Punishment
\Version 1.0 (2016-02-24)
\Shaun Khoo (ORCID: 0000-0002-0972-3788)
\-------------------------------------------------------------------------

\Control Constants
^SessionLength = 30		\Session length in minutes
^Timebins = 30			\Number of timebins
^CSVILeft = 120			\Variable Interval Schedule (s), CS, left lever
^CSVIRight = 120		\Variable Interval Schedule (s), CS, right lever
^VIScheduleLeft = 60		\Variable Interval Schedule (s), pellet, left lever
^VIScheduleRight = 60		\Variable Interval Schedule (s), pellet, right lever
^CS Duration = 10		\Conditioned Stimulus Duration (s)
^PunishLever = 1		\Determines which lever is punished, 1 for left, 2 for right
^LeftCue = 1			\Determines cue associated with left lever, 1 for lights, 2 for Clicker
^RightCue = 2			\Determines cue associated with right lever, 1 for lights, 2 for Clicker
^ClickFreq = 10			\Frequency of Clicker (Hz)
^ClickAmp = 87			\Amplitude in dB
^LightFlash = 5			\Light On/Off time in deciseconds
^Version = 100			\Program version

\Inputs
^LeftLever = 1
^RightLever = 3
^Magazine = 5

\Outputs
^LeftOut = 1
^RightOut = 2
^Pellet = 3
^LeftLight = 4
^RightLight = 5
^Dipper = 6
^HouseLight = 7
^MagLight = 8
^Infrared = 9
^Fan = 16
\Shock is on in-line pascal

\Z-Pulses
^Omnom = 1
^NomRight = 2
^CueLeft = 3
^CueRight = 4
^FLightsON = 5
^FLightsOFF = 6	\This also doubles as a cue-complete Z-pulse
^Shutdown = 8

\DATA - TOTALS
DIM A = 56
\A(0) = Left Lever Totals
\A(1) = Right Lever Totals
\A(2) = Left Lever Press ITI
\A(3) = Right Lever Press ITI
\A(4) = Left Lever Press CS1
\A(5) = Right Lever Press CS1
\A(6) = Left Lever Press CS2
\A(7) = Right Lever Press CS2
\A(8) = Pellets delivered
\A(9) = Magazine Entries
\A(10) = Number of CS1 Presentations
\A(11) = Number of CS2 Presentations
\A(12) = Total ITI Time
\A(13) = Total Time CS1
\A(14) = Total Time CS2
\A(15) = Latency to first left lever press ITI
\A(16) = Latency to first right lever press ITI
\A(17) = Latency to first left lever press CS1
\A(18) = Latency to first right lever press CS1
\A(19) = Latency to first left lever press CS2
\A(20) = Latency to first right lever press CS2
\A(21) = Latency to first pellet
\A(22) = Latency to first magazine entry

\DATA - EVENT LOG
DIM B = 50000		\All event times, 		subscript T/A(46)
DIM C = 50000		\All event identities, 		subscript T/A(46)
\Event Log Identity List
\1 - Left Lever Press
\1.1 - Left Lever Press in ITI time
\1.2 - Left Lever Press during CS1
\1.3 - Left Lever Press during CS2
\2 - Right Lever Press
\2.1 - Right Lever Press in ITI time
\2.2 - Right Lever Press during CS1
\2.3 - Right Lever Press during CS2
\3 - Pellet Delivery
\5 - Magazine entry
\6 - CS Presentation
\6.1 - Flashing Lights
\6.2 - Clicker
\8 - Shock

\DATA - TIMEBINS
DIM D = 1000		\Left lever presses ITI,	subscript T/A(47)
DIM E = 1000		\Right lever presses ITI,	subscript T/A(47)
DIM F = 1000		\Left lever presses CS1,	subscript T/A(47)
DIM G = 1000		\Right lever presses CS1,	subscript T/A(47)
DIM H = 1000		\Left lever press CS2,		subscript T/A(47)
DIM I = 1000		\Right lever press CS2,		subscript T/A(47)
DIM J = 1000		\Rewards,			subscript T/A(47)
DIM K = 1000		\Magazine entries

\DATA - TIMECOURSE
DIM L = 50000		\All left lever presses ITI,	subscript T/A(48)
DIM M = 50000		\All right lever presses ITI,	subscript T/A(49)
DIM N = 50000		\All left lever presses CS1,	subscript T/A(50)
DIM O = 50000		\All right lever presses CS1,	subscript T/A(51)
DIM P = 50000		\All left lever presses CS2,	subscript T/A(52)
DIM Q = 50000		\All right lever presses CS2,	subscript T/A(53)
DIM R = 50000		\All rewards,			subscript T/A(54)
DIM S = 50000		\All magazine entries,		subscript T/A(55)

\CONTROL VARIABLES - SESSION OPERATION
\A(37) = Session Clock
\A(38) = Centisecond Clock
\A(39) = Timebin shifter
\A(40) = CS VI Schedule Left
\A(41) = CS VI Schedule Right
\A(42) = VI Schedule Left
\A(43) = VI Schedule Right
\A(44) = CS Duration
\A(45) = Light Duration
\A(46) = Subscript for arrays B & C
\A(47) = Subscript for arrays D-K (Timebins
\A(48) = Subscript for array L
\A(49) = Subscript for array M
\A(50) = Subscript for array N
\A(51) = Subscript for array O
\A(52) = Subscript for array P
\A(53) = Subscript for array Q
\A(54) = subscript for array R
\A(55) = subscript for array S
\A(56) = CS duration before shock

\VARIABLES U AND V USED TO SET CLICKER PARAMETERS

\VI LISTS - These lists will be initialised into VI schedules
\VI LIST - LEFT LEVER PELLET ITI
LIST W = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,
17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,
33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48,
49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60

\VI LIST - LEFT LEVER CS ITI
LIST X = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,
17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,
33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48,
49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60

\VI LIST - RIGHT LEVER PELLET ITI
LIST Y = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,
17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,
33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48,
49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60

\VI LIST - RIGHT LEVER CS ITI
LIST Z = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,
17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,
33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48,
49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60

\CONTROL VARIABLES - SESSION PARAMETERS
var_alias Session Length (min) = A(23)
var_alias No. of Timebins = A(24)
var_alias CS VI Schedule Left = A(25)
var_alias CS VI Schedule Right = A(26)
var_alias Variable Interval Schedule (Left) = A(27)
var_alias Variable Interval Schedule (Right) = A(28)
var_alias CS Duration (s) = A(29)
var_alias Punished Lever (1L 2R) = A(30)
var_alias Left Cue (1Light 2Click) = A(31)
var_alias Right Cue (1Light 2Click) = A(32)
var_alias Clicker Frequency (Hz) = A(33)
var_alias Clicker Amplitude (dB) = A(34)
var_alias Light Flash Time (s) = A(35)
var_alias Program Version = A(36)


\DATA MANAGEMENT
DISKVARS = A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, W, X, Y, Z
DISKOPTIONS = FULLHEADERS
DISKCOLUMNS = 1
Y2KCOMPLIANT

\-------------------------------------------------------------------------
\State Set 1 - Session Control Program

S.S.1,
S1,	\State 1 sets default variable values
	0.01": SET A(23) = ^SessionLength, A(24) = ^Timebins, A(25) = ^CSVILeft;
	SET A(26) = ^CSVIRight, A(27) = ^VIScheduleLeft, A(28) = ^VIScheduleRight;
	SET A(29) = ^CS Duration, A(30) = ^PunishLever, A(31) = ^LeftCue;
	SET A(32) = ^RightCue, A(33) = ^ClickFreq, A(34) = ^ClickAmp;
	SET A(35) = (^LightFlash / 10), A(36) = ^Version / 100;

	\Seal all the arrays
	SET B(1) = -987.987, C(1) = -987.987, D(1) = -987.987, E(1) = -987.987;
	SET F(1) = -987.987, G(1) = -987.987, H(1) = -987.987, I(1) = -987.987;
	SET J(1) = -987.987, K(1) = -987.987, L(1) = -987.987, M(1) = -987.987;
	SET N(1) = -987.987, O(1) = -987.987, P(1) = -987.987, Q(1) = -987.987;
	SET R(1) = -987.987, S(1) = -987.987;

	\Show key variables
	SHOW 1, Session Length (min), A(23);
	SHOW 2, Punished Lever (1L 2R), A(30);
	SHOW 3, Left Lever Cue (1Light 2Click), A(31);
	Show 4, Right Lever Cue (1Light 2Click), A(32);
	SHOW 5, Click Amplitude, A(34) ---> S2

S2,	\State 2 responds to the start command
	#START: CLEAR 1, 5; SHOW 1, Session Time, A(37);
	ON ^Houselight; 
	SET L(0) = A(23) * 60, M(0) = A(23) * 60;
	SET N(0) = A(23) * 60, O(0) = A(23) * 60;
	SET P(0) = A(23) * 60, Q(0) = A(23) * 60;
	SET R(0) = A(23) * 60, S(0) = A(23) * 60;
	SET U = A(33), V = A(34);
	~InitANL926;~; ~SetFreq(MG,BOX,0);~; ~SetRF(MG,BOX,10);~;
	~SetClickFreq(MG,BOX,U);~; ~SetAmp(MG,BOX,V);~; ---> S3

S3,	\State 3 is the session clock
	1": ADD A(37); SHOW 1, Session Time, A(37);
	IF (A(37) / 60 >= A(23)) AND ((S.S.5 <= 3) AND (S.S.8 <= 3)) [@TRUE, @FALSE]
		@TRUE: Z^Shutdown;
		SET A(15) = L(0), A(16) = M(0), A(17) = N(0);
		SET A(18) = O(0), A(19) = P(0), A(20) = Q(0);
		SET A(21) = R(0), A(22) = S(0) ---> S4
		@FALSE: ---> SX

S4,	\State 4 ends the program
	1": SET A(12) = A(37) - A(13) - A(14) ---> STOPABORTFLUSH

\-------------------------------------------------------------------------
\State Set 2 - Centisecond clocks

S.S.2,
S1,	\State 1 responds to the start command
	#START: ---> S2

S2,	\State 2 times 1 centisecond increments, timebin shifting
	0.01": SET A(38) = A(38) + 0.01, A(39) = A(39) + 0.01;
	IF (A(39) / 60 >= A(23) / A(24)) AND ((A(47) + 1) < A(24)) [@SHIFT, @STAY]
		@SHIFT: SET X(2) = 0; ADD A(47); SET T = A(47);
			SET D(T) = 0, E(T) = 0, F(T) = 0, G(T) = 0;
			SET H(T) = 0, I(T) = 0, J(T) = 0, K(T) = 0;
			SET D(T+1) = -987.987, E(T+1) = -987.987;
			SET F(T+1) = -987.987, G(T+1) = -987.987;
			SET H(T+1) = -987.987, I(T+1) = -987.987;
			SET J(T+1) = -987.987, K(T+1) = -987.987 ---> SX
		@STAY: ---> SX

	#Z^Shutdown: ---> S1

\-------------------------------------------------------------------------
\State Set 3 - Left Lever

S.S.3,
S1,	\State 1 responds to the start command
	#START: SHOW 2, Left Lever, A(0); ON ^LeftOut ---> S2

S2,	\State 2 responds to active left lever presses during ITI time
	#R^LeftLever: ADD A(0), A(2);
	SET T = A(46), B(T) = A(38), C(T) = 1.1; ADD A(46);
	SET T = A(46), B(T) = -987.987, C(T) = -987.987;
	SET T = A(47); ADD D(T); SET T = A(48); SET L(T) = A(38);
	ADD A(48); SET T = A(48), L(T) = -987.987;
	SHOW 2, Left Lever, A(0);
	IF ((S.S.4 = 3) OR (S.S.5 = 3)) AND (S.S.6 < 3) [@EVENT, @NULL]
		@EVENT: IF S.S.5 = 3 [@CUE, @CHECK]
			@CUE: Z^CueLeft; IF A(31) = 1 [@CSONE, @CSTWO]
				@CSONE: ADD A(10) ---> S4
				@CSTWO: ADD A(11) ---> S5
			@CHECK: IF S.S.4 = 3 [@PELLET, @ERROR]
				@PELLET: Z^Omnom ---> S3
				@ERROR: SHOW 1, ERROR S.S.3 S2, A(0) ---> STOPKILL
		@NULL: ---> SX

	#Z^Shutdown: ---> S7
	#Z^CueRight: IF A(32) = 1 [@CSONE, @CSTWO]
		@CSONE: ---> S4
		@CSTWO: ---> S5

S3,	\State 3 is the 2 second holdover state for the pellet (ITI time; cannot trigger a CS)
	2": ---> S2

	#R^LeftLever: ADD A(0), A(2);
	SET T = A(46), B(T) = A(38), C(T) = 1.1; ADD A(46);
	SET T = A(46), B(T) = -987.987, C(T) = -987.987;
	SET T = A(47); ADD D(T); SET T = A(48); SET L(T) = A(38);
	ADD A(48); SET T = A(48), L(T) = -987.987;
	SHOW 2, Left Lever, A(0);
	IF (S.S.4 = 3) AND (S.S.6 < 3) [@EVENT, @NULL]
		@PELLET: Z^Omnom ---> S3
		@NULL: ---> SX

S4,	\State 4 records lever presses during presentation of CS1
	#R^LeftLever: ADD A(0), A(4);
	SET T = A(46), B(T) = A(38), C(T) = 1.2; ADD A(46);
	SET T = A(46), B(T) = -987.987, C(T) = -987.987;
	SET T = A(47); ADD F(T); SET T = A(50); SET N(T) = A(38);
	ADD A(50); SET T = A(50), N(T) = -987.987;
	SHOW 2, Left Lever, A(0);
	IF (S.S.4 = 3) AND (S.S.6 < 3) [@EVENT, @NULL]
		@PELLET: Z^Omnom ---> S3
		@NULL: ---> SX

	#Z^FLightsOff: ---> S6

S5,	\State 5 records lever presses during presentation of CS2
	#R^LeftLever: ADD A(0), A(6);
	SET T = A(46), B(T) = A(38), C(T) = 1.3; ADD A(46);
	SET T = A(46), B(T) = -987.987, C(T) = -987.987;
	SET T = A(47); ADD H(T); SET T = A(52); SET P(T) = A(38);
	ADD A(50); SET T = A(52), P(T) = -987.987;
	SHOW 2, Left Lever, A(0);
	IF (S.S.4 = 3) AND (S.S.6 < 3) [@EVENT, @NULL]
		@PELLET: Z^Omnom ---> S3
		@NULL: ---> SX

	#Z^FLightsOff: ---> S6

S6,	\State 6 is the 2 second holdover state for the CS (cannot trigger a pellet)
	2": ---> S2

	#R^LeftLever: ADD A(0), A(2);
	SET T = A(46), B(T) = A(38), C(T) = 1.1; ADD A(46);
	SET T = A(46), B(T) = -987.987, C(T) = -987.987;
	SET T = A(47); ADD D(T); SET T = A(48); SET L(T) = A(38);
	ADD A(48); SET T = A(48), L(T) = -987.987;
	SHOW 2, Left Lever, A(0);
	IF (S.S.5 = 3) AND (S.S.6 < 3) [@CUE, @NULL]
		@CUE: Z^CueLeft; IF A(31) = 1 [@CSONE, @CSTWO]
			@CSONE: ADD A(10) ---> S4
			@CSTWO: ADD A(11) ---> S5
		@NULL: ---> SX

S7,	\State 7 is the shutdown holding state
	#START: ---> SX

\-------------------------------------------------------------------------
\State Set 4 - Pellet Dispenser (Left)

S.S.4,
S1,	\State 1 responds to the start command, establishing schedule
	#START: INITCONSTPROBARR W, A(27);
	RANDD A(42) = W; SET A(42) = (A(42) - 0.5) * 1";
	SHOW 4, Pellets Delivered, A(8) ---> S2

S2,	\State 2 waits to make a pellet available
	A(42)#T: ---> S3

	#Z^Shutdown: ---> S5

S3,	\State 3 waits for a lever press to deliver the pellet
	#Z^Omnom: ON ^Pellet; ADD A(8);
	SET T = A(46), B(T) = A(38), C(T) = 3; ADD A(46);
	SET T = A(46), B(T) = -987.987, C(T) = -987.987;
	SET T = A(47); ADD J(T); SET T = A(54), R(T) = A(38);
	ADD A(54); SET T = A(54), R(T) = -987.987;
	SHOW 4, Pellets Delivered, A(8) ---> S4

	#Z^Shutdown: ---> S5

S4,	\State 4 turns off the pellet dispenser
	0.5": OFF ^Pellet; RANDD A(42) = W; SET A(42) = (A(42) - 0.5) * 1" ---> S2

S5,	\State 5 is a holding state
	#START: ---> SX

\-------------------------------------------------------------------------
\State Set 5 - Left Lever Cue Operator

S.S.5,
S1,	\State 1 responds to the start command, establishing schedule
	#START: INITCONSTPROBARR X, A(25);
	RANDD A(40) = X; SET A(40) = A(40) * 1";
	SET A(44) = A(29) * 1", A(56) = (A(29) - 0.5) * 1";
	~Shock(MG,Box,0.8,500);~; ---> S2

S2,	\State 2 waits to make a left CS available
	A(40)#T: ---> S3

	#Z^Shutdown: ---> S7

S3,	\State 3 waits for a lever press to deliver the CS
	#Z^CueLeft: IF A(30) = 1 [@PUNISH, @NOTPUNISHED]
		@PUNISH: IF A(31) = 1 [@FLights, @CLICK]
			@FLights: Z^FLightsON; SET T = A(46), B(T) = A(38), C(T) = 6.1;
			ADD A(46); SET T = A(46), B(T) = -987.987, C(T) = -987.987;
			SET A(13) = A(13) + A(29) ---> S5
			@CLICK: ~ClickOn(MG,BOX);~; SET T = A(46), B(T) = A(38), C(T) = 6.2;
			ADD A(46); SET T = A(46), B(T) = -987.987, C(T) = -987.987;
			SET A(14) = A(14) + A(29) ---> S5
		@NOTPUNISHED: IF A(31) = 1 [@FLights, @CLICK]
			@FLights: Z^FLightsON; SET T = A(46), B(T) = A(38), C(T) = 6.1;
			ADD A(46); SET T = A(46), B(T) = -987.987, C(T) = -987.987;
			SET A(13) = A(13) + A(29) ---> S4
			@CLICK: ~ClickOn(MG,BOX);~; SET T = A(46), B(T) = A(38), C(T) = 6.2;
			ADD A(46); SET T = A(46), B(T) = -987.987, C(T) = -987.987;
			SET A(14) = A(14) + A(29) ---> S4

	#Z^Shutdown: ---> S7

S4,	\State 4 runs an unpunished CS
	A(44)#T: Z^FLightsOFF; ~ClickOff(MG,BOX);~; RANDD A(40) = X; SET A(40) = A(40) * 1" ---> S2

S5,	\State 5 runs a punished CS
	A(56)#T: ~ShockOn(MG,BOX);~; SET T = A(46), B(T) = 8, C(T) = A(38);
	ADD A(46); SET T = A(46), B(T) = -987.987, C(T) = -987.987 ---> S6

S6,	\State 6 turns off the shock
	0.5":  ~ShockOff(MG,BOX);~; Z^FLightsOFF; ~ClickOff(MG,BOX);~; RANDD A(40) = X;
	SET A(40) = A(40) * 1" ---> S2

S7,	\State 7 is a holding state
	#START: ---> SX

\-------------------------------------------------------------------------
\State Set 6 - Right Lever

S.S.6,
S1,	\State 1 responds to the start command
	#START: SHOW 3, Right Lever, A(1); ON ^RightOut ---> S2

S2,	\State 2 responds to active left lever presses during ITI time
	#R^RightLever: ADD A(1), A(3);
	SET T = A(46), B(T) = A(38), C(T) = 2.1; ADD A(46);
	SET T = A(46), B(T) = -987.987, C(T) = -987.987;
	SET T = A(47); ADD E(T); SET T = A(49); SET M(T) = A(38);
	ADD A(49); SET T = A(49), M(T) = -987.987;
	SHOW 3, Right Lever, A(1);
	IF ((S.S.7 = 3) OR (S.S.8 = 3)) AND (S.S.3 < 3) [@EVENT, @NULL]
		@EVENT: IF S.S.8 = 3 [@CUE, @CHECK]
			@CUE: Z^CueRight; IF A(32) = 1 [@CSONE, @CSTWO]
				@CSONE: ADD A(10) ---> S4
				@CSTWO: ADD A(11) ---> S5
			@CHECK: IF S.S.7 = 3 [@PELLET, @ERROR]
				@PELLET: Z^NomRight ---> S3
				@ERROR: SHOW 1, ERROR S.S.6 S2, A(0) ---> STOPKILL
		@NULL: ---> SX

	#Z^Shutdown: ---> S7
	#Z^CueLeft: IF A(31) = 1 [@CSONE, @CSTWO]
		@CSONE: ---> S4
		@CSTWO: ---> S5

S3,	\State 3 is the 2 second holdover state for the pellet (ITI time; cannot trigger a CS)
	2": ---> S2

	#R^RightLever: ADD A(1), A(3);
	SET T = A(46), B(T) = A(38), C(T) = 2.1; ADD A(46);
	SET T = A(46), B(T) = -987.987, C(T) = -987.987;
	SET T = A(47); ADD E(T); SET T = A(49); SET M(T) = A(38);
	ADD A(49); SET T = A(49), M(T) = -987.987;
	SHOW 3, Right Lever, A(1);
	IF (S.S.7 = 3) AND (S.S.3 < 3) [@PELLET, @NULL]
		@PELLET: Z^NomRight ---> S3
		@NULL: ---> SX

S4,	\State 4 records lever presses during presentation of CS1
	#R^RightLever: ADD A(1), A(5);
	SET T = A(46), B(T) = A(38), C(T) = 2.2; ADD A(46);
	SET T = A(46), B(T) = -987.987, C(T) = -987.987;
	SET T = A(47); ADD G(T); SET T = A(51); SET O(T) = A(38);
	ADD A(51); SET T = A(51), O(T) = -987.987;
	SHOW 3, Right Lever, A(1);
	IF (S.S.7 = 3) AND (S.S.3 < 3) [@EVENT, @NULL]
		@PELLET: Z^NomRight ---> S3
		@NULL: ---> SX

	#Z^FLightsOff: ---> S6

S5,	\State 5 records lever presses during presentation of CS2
	#R^RightLever: ADD A(1), A(7);
	SET T = A(46), B(T) = A(38), C(T) = 2.3; ADD A(46);
	SET T = A(46), B(T) = -987.987, C(T) = -987.987;
	SET T = A(47); ADD I(T); SET T = A(53); SET Q(T) = A(38);
	ADD A(53); SET T = A(53), Q(T) = -987.987;
	SHOW 3, Right Lever, A(1);
	IF (S.S.7 = 3) AND (S.S.3 < 3) [@EVENT, @NULL]
		@PELLET: Z^NomRight ---> S3
		@NULL: ---> SX

	#Z^FLightsOff: ---> S6

S6,	\State 6 is the 2 second holdover state for the CS (cannot trigger a pellet)
	2": ---> S2

	#R^RightLever: ADD A(1), A(3);
	SET T = A(46), B(T) = A(38), C(T) = 2.1; ADD A(46);
	SET T = A(46), B(T) = -987.987, C(T) = -987.987;
	SET T = A(47); ADD E(T); SET T = A(49); SET M(T) = A(38);
	ADD A(49); SET T = A(49), M(T) = -987.987;
	SHOW 3, Right Lever, A(1);
	IF (S.S.8 = 3) AND (S.S.3 < 3) [@CUE, @NULL]
		@CUE: Z^CueRight; IF A(32) = 1 [@CSONE, @CSTWO]
			@CSONE: ADD A(10) ---> S4
			@CSTWO: ADD A(11) ---> S5
		@NULL: ---> SX

S7,	\State 7 is the shutdown holding state
	#START: ---> SX

\-------------------------------------------------------------------------
\State Set 7 - Pellet Dispenser (Right)

S.S.7,
S1,	\State 1 responds to the start command, establishing schedule
	#START: INITCONSTPROBARR Y, A(28);
	RANDD A(43) = Y; SET A(43) = (A(43) - 0.5) * 1" ---> S2

S2,	\State 2 waits to make a pellet available
	A(43)#T: ---> S3

	#Z^Shutdown: ---> S5

S3,	\State 3 waits for a lever press to deliver the pellet
	#Z^NomRight: ON ^Pellet; ADD A(8);
	SET T = A(46), B(T) = A(38), C(T) = 3; ADD A(46);
	SET T = A(46), B(T) = -987.987, C(T) = -987.987;
	SET T = A(47); ADD J(T); SET T = A(54), R(T) = A(38);
	ADD A(54); SET T = A(54), R(T) = -987.987;
	SHOW 4, Pellets Delivered, A(8) ---> S4

	#Z^Shutdown: ---> S5

S4,	\State 4 turns off the pellet dispenser
	0.5": RANDD A(43) = Y; SET A(43) = (A(43) - 0.5) * 1" ---> S2

	#Z^Shutdown: OFF ^Pellet ---> S5

S5,	\State 5 is a holding state
	#START: ---> SX

\-------------------------------------------------------------------------
\State Set 8 - Right Lever Cue Operator

S.S.8,
S1,	\State 1 responds to the start command, establishing schedule
	#START: INITCONSTPROBARR Z, A(26);
	RANDD A(41) = Z; SET A(41) = A(41) * 1" ---> S2

S2,	\State 2 waits to make a left CS available
	A(41)#T: ---> S3

	#Z^Shutdown: ---> S7

S3,	\State 3 waits for a lever press to deliver the CS
	#Z^CueRight: IF A(30) = 2 [@PUNISH, @NOTPUNISHED]
		@PUNISH: IF A(32) = 1 [@FLights, @CLICK]
			@FLights: Z^FLightsON; SET T = A(46), B(T) = A(38), C(T) = 6.1;
			ADD A(46); SET T = A(46), B(T) = -987.987, C(T) = -987.987;
			SET A(13) = A(13) + A(29) ---> S5
			@CLICK: ~ClickOn(MG,BOX);~; SET T = A(46), B(T) = A(38), C(T) = 6.2;
			ADD A(46); SET T = A(46), B(T) = -987.987, C(T) = -987.987;
			SET A(14) = A(14) + A(29) ---> S5
		@NOTPUNISHED: IF A(32) = 1 [@FLights, @CLICK]
			@FLights: Z^FLightsON; SET T = A(46), B(T) = A(38), C(T) = 6.1;
			ADD A(46); SET T = A(46), B(T) = -987.987, C(T) = -987.987;
			SET A(13) = A(13) + A(29) ---> S4
			@CLICK: ~ClickOn(MG,BOX);~; SET T = A(46), B(T) = A(38), C(T) = 6.2;
			ADD A(46); SET T = A(46), B(T) = -987.987, C(T) = -987.987;
			SET A(14) = A(14) + A(29) ---> S4

	#Z^Shutdown: ---> S7

S4,	\State 4 runs an unpunished CS
	A(44)#T: Z^FLightsOFF; ~ClickOff(MG,BOX);~; RANDD A(41) = Z; SET A(41) = A(41) * 1" ---> S2

S5,	\State 5 runs a punished CS
	A(56)#T: ~ShockOn(MG,BOX);~; SET T = A(46), B(T) = 8, C(T) = A(38);
	ADD A(46); SET T = A(46), B(T) = -987.987, C(T) = -987.987 ---> S6

S6,	\State 6 turns off the shock
	0.5": ~ShockOff(MG,BOX);~; Z^FLightsOFF; ~ClickOff(MG,BOX);~; RANDD A(41) = Z;
	SET A(41) = A(41) * 1" ---> S2

S7,	\State 7 is a holding state
	#START: ---> SX

\-------------------------------------------------------------------------
\State Set 9 - Magazine Entries

S.S.9,
S1,	\State 1 responds to the start command
	#START: SHOW 5, Magazine Entries, A(9) ---> S2

S2,	\State 2 records magazine entries
	#R^Magazine: ADD A(9); SET T = A(46), B(T) = A(38), C(T) = 5;
	ADD A(46); SET T = A(46), B(T) = -987.987, C(T) = -987.987;
	SET T = A(47); ADD K(T); SET T = A(55), S(T) = A(38);
	ADD A(55); SET T = A(55), S(T) = -987.987;
	SHOW 5, Magazine Entries, A(9) ---> SX

	#Z^Shutdown: ---> S3

S3,	\State 3 is a holding state
	#START: ---> SX

\-------------------------------------------------------------------------
\State Set 10 - Flashing Lights Operator

S.S.10,
S1,	\State 1 responds to the start command, setting the flash duration
	#START: SET A(45) = A(35) * 1" ---> S2

	#Z^Shutdown: ---> S5

S2,	\State 2 responds to the flashing Lights Z-Pulse
	#Z^FLightsON: OFF ^Houselight; ON ^LeftLight, ^RightLight, ^MagLight ---> S3

S3,	\State 3 cycles the Lights off
	A(45)#T: OFF ^LeftLight, ^RightLight, ^MagLight ---> S4

	#Z^FLightsOFF: OFF ^LeftLight, ^RightLight, ^MagLight; ON ^Houselight ---> S2

S4,	\State 4 cycles the Lights on
	A(45)#T: ON ^LeftLight, ^RightLight, ^MagLight ---> S3

	#Z^FLightsOFF: OFF ^LeftLight, ^RightLight, ^MagLight; ON ^Houselight ---> S2

S5,	\State 5 is a holding state
	#START: ---> SX

\-------------------------------------------------------------------------
\State Set 11 - Screen refresher

S.S.11,
S1,	\State 1 refreshes the screen
	1.5": SHOW 1, Session Length (min), A(23);
	SHOW 2, Punished Lever (1L 2R), A(30);
	SHOW 3, Left Lever Cue (1Light 2Click), A(31);
	Show 4, Right Lever Cue (1Light 2Click), A(32);
	SHOW 5, Click Amplitude, A(34);
	IF S.S.1 > 2 [@MISS, @STAY]
		@MISS: ---> S2
		@STAY: ---> SX

	#START: ---> S2

S2,	\State 2 is a holding state
	#START: ---> SX